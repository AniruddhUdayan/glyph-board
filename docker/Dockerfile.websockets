# Simple optimized WebSocket backend Dockerfile
FROM node:20-alpine

RUN npm install -g pnpm@9.0.0

WORKDIR /app

COPY pnpm-workspace.yaml pnpm-lock.yaml package.json ./
COPY apps/ws-backend/package.json ./apps/ws-backend/
COPY packages/backend-common/package.json ./packages/backend-common/
COPY packages/common/package.json ./packages/common/
COPY packages/db/package.json ./packages/db/
COPY packages/eslint-config/package.json ./packages/eslint-config/
COPY packages/typescript-config/package.json ./packages/typescript-config/
COPY packages/ui/package.json ./packages/ui/

RUN pnpm install --no-frozen-lockfile || pnpm install --no-frozen-lockfile

COPY packages/ ./packages/
COPY apps/ws-backend/ ./apps/ws-backend/

RUN pnpm --filter @repo/backend-common build 2>/dev/null || echo "Backend-common package built"
RUN pnpm --filter @repo/db build 2>/dev/null || echo "DB package built"

RUN cd packages/db && npx prisma generate

WORKDIR /app/apps/ws-backend
RUN pnpm build

EXPOSE 8081

ENV NODE_ENV=production

CMD ["pnpm", "start"]

